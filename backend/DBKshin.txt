
create table Cliente(
	id_cliente varchar(255) not null unique, 
	nombre varchar(255) not null, 
	
	primary key (id_cliente)
);

create table Proveedor(
	id_proveedor int not null unique, 
	nombre varchar(255) not null, 
	apellido varchar(255) not null,
	direccion varchar(255) not null,
	id_cliente varchar(255) not null, 
	
	primary key (id_proveedor),
	constraint id_cliente foreign key (id_cliente) 	references Cliente(id_cliente)
);

create table Producto(
	id_producto int not null unique, 
	nombre varchar(255) not null, 
	cantidad int not null,
	precio int not null,
	maximo int not null,
	minimo int not null,
	id_cliente varchar(255) not null,

	primary key (id_producto),
	constraint id_cliente foreign key (id_cliente) 	references Cliente(id_cliente)
);

create table Compra(
	id_compra int not null unique, 
	cantidad int not null,
	costo int not null, 
	id_cliente varchar(255) not null,
	id_producto int not null,

	primary key (id_compra),
	constraint id_cliente foreign key (id_cliente) 	references Cliente(id_cliente),
	constraint id_producto foreign key (id_producto) references Producto(id_producto)
);

create table Venta(
	id_venta int not null unique, 
	cantidad int not null,
	id_cliente varchar(255) not null,
	id_producto int not null,

	primary key (id_venta),
	constraint id_cliente foreign key (id_cliente) 	references Cliente(id_cliente),
	constraint id_producto foreign key (id_producto) references Producto(id_producto)
);

CREATE OR REPLACE FUNCTION calcular_ganancia_venta(id_venta int)
RETURNS int AS $$
DECLARE
    precio_producto int;
    cantidad_venta int;
    total_ganancia int;
BEGIN
    SELECT p.precio, v.cantidad
    INTO precio_producto, cantidad_venta
    FROM producto p
    JOIN venta v ON p.id_producto = v.id_producto;

    total_ganancia := precio_producto * cantidad_venta;

    RETURN total_ganancia;
END;
$$ LANGUAGE plpgsql;

ALTER TABLE VENTA DROP CONSTRAINT id_producto;
ALTER TABLE VENTA ADD CONSTRAINT id_producto FOREIGN KEY (id_producto)
        REFERENCES public.producto (id_producto) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE CASCADE;  
ALTER TABLE COMPRA DROP CONSTRAINT id_producto;
ALTER TABLE COMPRA ADD CONSTRAINT id_producto FOREIGN KEY (id_producto)
        REFERENCES public.producto (id_producto) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE CASCADE;

CREATE OR REPLACE FUNCTION modificar_cantidad_eliminar_venta()
RETURNS SETOF TRIGGER
LANGUAGE 'plpgsql'
AS $BODY$
Declare 
idproducto int;
cant int;
begin
 Select e.id_producto into idproducto from venta e where e.id_venta=old.id_venta;
 Select e.cantidad into cant from venta e where e.id_venta=old.id_venta;

 update producto e
 SET cantidad=cantidad+cant WHERE e.id_producto=idproducto;
 return OLD;
End;
$BODY$;

CREATE OR REPLACE TRIGGER modificar_cantidad_v_e
    BEFORE DELETE
    ON public.venta
    FOR EACH ROW
    EXECUTE FUNCTION public.modificar_cantidad_eliminar_venta();

CREATE OR REPLACE FUNCTION modificar_cantidad_eliminar_compra()
RETURNS SETOF TRIGGER
LANGUAGE 'plpgsql'
AS $BODY$
Declare
	idproducto int;
	cant int;
begin
 Select e.id_producto into idproducto from compra e where e.id_compra=old.id_compra;
  Select e.cantidad into cant from compra e where e.id_compra=old.id_compra;
 update producto e
 SET cantidad=cantidad-cant WHERE e.id_producto=idproducto;
 return OLD;
End;
$BODY$;

CREATE OR REPLACE TRIGGER modificar_cantidad_c_e
    Before DELETE
    ON public.compra
    FOR EACH ROW
    EXECUTE FUNCTION public.modificar_cantidad_eliminar_compra();

CREATE OR REPLACE FUNCTION modificar_cantidad_venta()
RETURNS SETOF TRIGGER
LANGUAGE 'plpgsql'
AS $BODY$
Declare 
begin
 update producto
 SET cantidad=cantidad-new.cantidad WHERE new.id_producto=id_producto;
 return new;
End;
$BODY$;

CREATE OR REPLACE TRIGGER modificar_cantidad_v
    AFTER INSERT
    ON public.venta
    FOR EACH ROW
    EXECUTE FUNCTION public.modificar_cantidad_venta();

CREATE OR REPLACE FUNCTION modificar_cantidad_compra()
RETURNS SETOF TRIGGER
LANGUAGE 'plpgsql'
AS $BODY$
Declare 
begin
 update producto
 SET cantidad=cantidad+new.cantidad WHERE new.id_producto=id_producto;
 return new;
End;
$BODY$;

CREATE OR REPLACE TRIGGER modificar_cantidad_c
    AFTER INSERT
    ON public.compra
    FOR EACH ROW
    EXECUTE FUNCTION public.modificar_cantidad_compra();